interface CounterCollection {
  id: String!
  name: String!
  counterIds: [String!]!
  dateLastUpdated: Date!
}

type StandardCounterCollection implements CounterCollection {
  id: String!
  name: String!
  counterIds: [String!]!
  dateLastUpdated: Date!
}

type UserCounterCollection implements CounterCollection {
  id: String!
  name: String!
  counterIds: [String!]!
  dateLastUpdated: Date!
  dateCreated: Date!
}

extend type Query {
  standardCounterCollections: [StandardCounterCollection!]!
  userCounterCollections: [UserCounterCollection!]!
}

extend type Mutation {
  createCounterCollection(name: String!): CreateCounterCollectionResult!
  addCounterToCollection(
    collectionId: String!
    counterId: String!
  ): AddCounterToCollectionResponse!
}

enum CreateCounterCollectionError {
  # Validation errors
  NAME_MISSING_OR_EMPTY
  NAME_TOO_SHORT
  NAME_TOO_LONG

  # Operation errors
  NOT_AUTHENTICATED
  COULD_NOT_CREATE
  RATE_LIMITED
}

type CreateCounterCollectionResult {
  error: CreateCounterCollectionError
  collection: UserCounterCollection
}

enum AddCounterToCollectionResult {
  # Success
  SUCCESS

  # Validation errors
  ERROR_COUNTER_DOES_NOT_EXIST
  ERROR_COLLECTION_DOES_NOT_EXIST

  # Operation errors
  ERROR_RATE_LIMITED
  ERROR_NOT_AUTHENTICATED
  ERROR_ALREADY_IN_COLLECTION
  ERROR_COULD_NOT_ADD
}

type AddCounterToCollectionResponse {
  collectionId: String!
  counterId: String!
  result: AddCounterToCollectionResult!
}
