type UserAccount {
  dateRegistered: Date!
  username: String!
}

extend type Query {
  activeUser: UserAccount

  # True iff the auth session that was previously in the auth cookie has
  # expired. If there is no auth cookie, the auth cookie is invalid in any
  # other way, or if the user is correctly logged in, this will be false.
  hasSessionExpired: Boolean!
}

extend type Mutation {
  changePassword(
    oldPassword: String!
    newPassword: String!
  ): ChangePasswordPayload!
  login(email: String!, password: String!): LoginPayload!
  logout: LogoutPayload!
  registerAccount(email: String!, password: String!): RegisterAccountPayload!
  redeemPasswordReset(
    firstCode: String!
    secondCode: String!
    password: String!
  ): RedeemPasswordResetPayload!
  requestEmailVerification(
    email: String!
    password: String!
  ): RequestEmailVerificationPayload!
  requestPasswordReset(email: String!): RequestPasswordResetPayload!
  verifyEmail(email: String!, code: String!): VerifyEmailPayload!
}

enum RegisterAccountError {
  # Email-related validation errors
  EMAIL_EMPTY
  EMAIL_INVALID_FORMAT

  # Password-related validation errors
  PASSWORD_TOO_SHORT
  PASSWORD_MISSING_NUMERAL

  # Registration errors
  ACCOUNT_ALREADY_EXISTS
  ALREADY_AUTHENTICATED
  RATE_LIMITED
}

type RegisterAccountPayload {
  error: RegisterAccountError
  success: Boolean!
}

enum LoginError {
  # Validation errors
  EMAIL_EMPTY
  PASSWORD_EMPTY

  # Login errors
  EMAIL_PASSWORD_COMBINATION_INCORRECT
  EMAIL_NOT_VERIFIED
  ALREADY_AUTHENTICATED
  RATE_LIMITED
}

type LoginPayload {
  error: LoginError
  user: UserAccount
}

enum LogoutError {
  RATE_LIMITED
  WASNT_AUTHENTICATED
}

type LogoutPayload {
  error: LogoutError
}

enum VerifyEmailError {
  # Validation errors
  EMAIL_EMPTY
  EMAIL_INVALID_FORMAT
  CODE_EMPTY
  CODE_INVALID_FORMAT

  # Verification errors
  CODE_NOT_FOUND
  ALREADY_VERIFIED_EMAIL
  RATE_LIMITED
}

type VerifyEmailPayload {
  error: VerifyEmailError
  user: UserAccount
}

enum ChangePasswordError {
  # Validation errors
  OLD_PASSWORD_EMPTY
  NEW_PASSWORD_TOO_SHORT
  NEW_PASSWORD_MISSING_NUMERAL

  # Operation errors
  OLD_PASSWORD_NOT_CORRECT
  NOT_AUTHENTICATED
  RATE_LIMITED
}

type ChangePasswordPayload {
  error: ChangePasswordError
  success: Boolean!
}

enum RequestPasswordResetError {
  # Validation errors
  EMAIL_EMPTY
  EMAIL_INVALID_FORMAT

  # Operation errors
  ALREADY_AUTHENTICATED
  RATE_LIMITED
}

type RequestPasswordResetPayload {
  error: RequestPasswordResetError

  # This endpoint won't return back whether the email actually was found
  # in the database or not, only whether we could have sent an email. Wording
  # for interpretting this field should be "If the provided email was registered
  # here, check your email inbox shortly to find the reset link." or something.
  possibleSuccess: Boolean!
}

enum RedeemPasswordResetError {
  # Validation errors
  FIRST_CODE_INVALID
  SECOND_CODE_INVALID
  PASSWORD_TOO_SHORT
  PASSWORD_MISSING_NUMERAL

  # Operation errors
  CODES_INVALID
  ALREADY_AUTHENTICATED
  RATE_LIMITED
}

type RedeemPasswordResetPayload {
  error: RedeemPasswordResetError
  user: UserAccount
}

enum RequestEmailVerificationError {
  # Validation errors
  EMAIL_EMPTY
  PASSWORD_EMPTY

  # Authentication-based errors
  EMAIL_PASSWORD_COMBINATION_INCORRECT
  ALREADY_AUTHENTICATED
  RATE_LIMITED

  # Operation errors
  EMAIL_ALREADY_VERIFIED
  VERIFICATION_EMAIL_SENT_TOO_RECENTLY
}

type RequestEmailVerificationPayload {
  error: RequestEmailVerificationError
  success: Boolean!
}
