type UserAccount {
  dateRegistered: Date!
  username: String!
}

extend type Query {
  activeUser: UserAccount
}

extend type Mutation {
  login(email: String!, password: String!): LoginPayload!
  logout: LogoutPayload!
  registerAccount(email: String!, password: String!): RegisterAccountPayload!
  verifyEmail(email: String!, code: String!): VerifyEmailPayload!
}

enum RegisterAccountError {
  # Email-related validation errors
  EMAIL_EMPTY
  EMAIL_INVALID_FORMAT

  # Password-related validation errors
  PASSWORD_TOO_SHORT
  PASSWORD_MISSING_NUMERAL

  # Registration errors
  ACCOUNT_ALREADY_EXISTS
  ALREADY_AUTHENTICATED
  RATE_LIMITED
}

type RegisterAccountPayload {
  error: RegisterAccountError
  user: UserAccount
}

enum LoginError {
  # Validation errors
  EMAIL_EMPTY
  PASSWORD_EMPTY

  # Login errors
  EMAIL_PASSWORD_COMBINATION_INCORRECT
  EMAIL_NOT_VERIFIED
  ALREADY_AUTHENTICATED
  RATE_LIMITED
}

type LoginPayload {
  error: LoginError
  user: UserAccount
}

enum LogoutError {
  RATE_LIMITED
  WASNT_AUTHENTICATED
}

type LogoutPayload {
  error: LogoutError
}

enum VerifyEmailError {
  # Validation errors
  EMAIL_EMPTY
  EMAIL_INVALID_FORMAT
  CODE_EMPTY
  CODE_INVALID_FORMAT

  # Verification errors
  CODE_NOT_FOUND
  ALREADY_VERIFIED_EMAIL
  RATE_LIMITED
}

type VerifyEmailPayload {
  error: VerifyEmailError
  user: UserAccount
}
